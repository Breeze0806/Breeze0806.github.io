<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>http://example.org/posts/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 02 Jul 2023 20:19:32 +0800</lastBuildDate><atom:link href="http://example.org/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Etl</title>
      <link>http://example.org/posts/go-etl/</link>
      <pubDate>Sun, 02 Jul 2023 20:19:32 +0800</pubDate>
      
      <guid>http://example.org/posts/go-etl/</guid>
      <description>go-etl数据同步项目 go-etl目前是由我主导开发的一个开源项目，是一个集数据源抽取，转化，加载的工具集。它目前主要是由go语言开发的，基于go语言的跨平台的，目前它已经能稳定在windows和Linux下对主流数据库和无结构流文件进行数据同步。
由于go-etl是我从零开始搭建的项目，为此在本项目中使用了大量的go语言相关的特性以及构建特性。在本项目中你不仅可以使用go-etl的数据同步特性，还可以从零开始学习如何使用go语言去搭建一个开源项目。欢迎加QQ群185188648来讨论go-etl，让我们一起进步!
数据源支持列表 目前它支持的数据源如下表所示，可以看到目前go-etl数据同步工具已经支持了主流的关系型数据库和主流的文件类型。
类型 数据源 Reader（读） Writer(写) 关系型数据库 MySQL/Mariadb/Tidb √ √ Postgres/Greenplum √ √ DB2 LUW √ √ SQL Server √ √ Oracle √ √ 无结构流 CSV √ √ XLSX（excel） √ √ 数据同步用户手册 使用go-etl数据同步用户手册开始数据同步，另外需要下载[go-etl数据同步工具datax的v0.1.4版本](Release v0.1.4: 新增querySQL特性和调试监控端口 · Breeze0806/go-etl · GitHub)
数据同步开发宝典 参考go-etl数据同步开发者文档来帮助开发，注意构建方式也放在了go-etl数据同步用户手册
模块简介 datax 本包将提供类似于阿里巴巴DataX的接口去实现go的etl框架。
go-etl主要离线数据同步框架，其框架如下：
readerPlugin(reader)—&amp;gt; Framework(Exchanger+Transformer) -&amp;gt;writerPlugin(riter) 采用Framework + plugin架构构建。将数据源读取和写入抽象成为Reader/Writer插件，纳入到整个同步框架中。
Reader：Reader为数据采集模块，负责采集数据源的数据，将数据发送给Framework。 Writer：Writer为数据写入模块，负责不断向Framework取数据，并将数据写入到目的端。 Framework：Framework用于连接reader和writer，作为两者的数据传输通道，并处理缓冲，流控，并发，数据转换等核心技术问题 详细的框架在go-etl数据同步开发者文档有所说明
storage database 目前已经实现了数据库的基础集成，抽象出了数据库方言（Dialect），数据源（Source），数据表（Table）以及数据列（Field）等关键接口，其底层主要借助golang标准库的database/sql来抽象，是一个非常有go语言特点的库。
stream 主要用于字节流的解析，如文件，消息队列，elasticsearch等，字节流格式可以是cvs，json, xml等
file 主要用于文件的解析，如cvs，excel等，抽象出了输入文件流（InStream）和输出文件流（OutStream）等关键接口，采用文件io.Reader和io.Writer等具有go语言特点的接口去实现的库。
tools 工具集用于编译，新增许可证等
datax build go generate .</description>
    </item>
    
  </channel>
</rss>
